{"version":3,"sources":["webpack:///src/app/authentication/locked/locked.component.ts","webpack:///src/app/authentication/locked/locked.component.html","webpack:///src/app/authentication/page500/page500.component.ts","webpack:///src/app/authentication/page500/page500.component.html","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/signin/signin.component.ts","webpack:///src/app/authentication/signin/signin.component.html","webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/set-password/set-password.component.ts","webpack:///src/app/authentication/set-password/set-password.component.html","webpack:///src/app/authentication/signup/signup.component.ts","webpack:///src/app/authentication/signup/signup.component.html","webpack:///src/app/authentication/otp-modal/otp-modal.component.ts","webpack:///src/app/authentication/otp-modal/otp-modal.component.html","webpack:///src/app/authentication/forgot-password/forgot-password.component.ts","webpack:///src/app/authentication/forgot-password/forgot-password.component.html"],"names":["LockedComponent","formBuilder","router","authService","submitted","hide","authForm","group","password","required","userImg","currentUserValue","img","userFullName","firstName","lastName","controls","invalid","role","All","Admin","navigate","Doctor","Patient","onSubmit","selector","templateUrl","styleUrls","Page500Component","AuthenticationModule","declarations","imports","SigninComponent","route","error","username","get","setValue","login","f","value","subscribe","res","routes","path","redirectTo","pathMatch","component","AuthenticationRoutingModule","forChild","exports","SetPasswordComponent","chide","cpassword","returnUrl","snapshot","queryParams","SignupComponent","position","industry","experience","matcher","salutation","city","state","email","minLength","setValues","OtpModalComponent","ForgotPasswordComponent"],"mappings":"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","file":"authentication-authentication-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/core/service/auth.service';\r\nimport { Role } from 'src/app/core/models/role';\r\n@Component({\r\n  selector: 'app-locked',\r\n  templateUrl: './locked.component.html',\r\n  styleUrls: ['./locked.component.scss'],\r\n})\r\nexport class LockedComponent implements OnInit {\r\n  authForm: FormGroup;\r\n  submitted = false;\r\n  userImg: string;\r\n  userFullName: string;\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n  ngOnInit() {\r\n    this.authForm = this.formBuilder.group({\r\n      password: ['', Validators.required],\r\n    });\r\n    this.userImg = this.authService.currentUserValue.img;\r\n    this.userFullName =\r\n      this.authService.currentUserValue.firstName +\r\n      ' ' +\r\n      this.authService.currentUserValue.lastName;\r\n  }\r\n  get f() {\r\n    return this.authForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.authForm.invalid) {\r\n      return;\r\n    } else {\r\n      const role = this.authService.currentUserValue.role;\r\n      if (role === Role.All || role === Role.Admin) {\r\n        this.router.navigate(['/admin/dashboard/main']);\r\n      } else if (role === Role.Doctor) {\r\n        this.router.navigate(['/doctor/dashboard']);\r\n      } else if (role === Role.Patient) {\r\n        this.router.navigate(['/patient/dashboard']);\r\n      } else {\r\n        this.router.navigate(['/authentication/signin']);\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/bg-01.png);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"auth-locked\">\r\n              <div class=\"image\">\r\n                <img src={{userImg}} alt=\"User\">\r\n              </div>\r\n            </div>\r\n            <span class=\"auth-locked-title p-b-34 p-t-27\">\r\n              {{userFullName}}\r\n            </span>\r\n            <div class=\"text-center\">\r\n              <p class=\"txt1 p-b-20\">\r\n                Locked\r\n              </p>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n                  Enter your password here.\r\n                </span>\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Password</mat-label>\r\n                  <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n                  <mat-icon matSuffix (click)=\"hide = !hide\">\r\n                    {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\r\n                    Password is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"container-auth-form-btn mt-5\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \"\r\n                type=\"submit\">\r\n                Reset My Password\r\n              </button>\r\n            </div>\r\n            <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n              <div>\r\n                <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n                  Need Help?\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n@Component({\r\n  selector: 'app-page500',\r\n  templateUrl: './page500.component.html',\r\n  styleUrls: ['./page500.component.scss'],\r\n})\r\nexport class Page500Component implements OnInit {\r\n  constructor() {}\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/bg-05.png);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <form>\r\n            <span class=\"error-header p-b-45\">\r\n              500\r\n            </span>\r\n            <span class=\"error-subheader2 p-b-5\">\r\n              Oops, Something went wrong. Please try after some times.\r\n            </span>\r\n            <div class=\"container-auth-form-btn mt-5\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" type=\"submit\">\r\n                Go To Home Page\r\n              </button>\r\n            </div>\r\n            <div class=\"w-full p-t-15 p-b-15 text-center\">\r\n              <div>\r\n                <a routerLink=\"/authentication/signin\" class=\"txt1\">\r\n                  Need Help?\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button'; \r\nimport { MatSelectModule } from '@angular/material/select';\nimport { SetPasswordComponent } from './set-password/set-password.component';\nimport { OtpModalComponent } from './otp-modal/otp-modal.component';\r\n@NgModule({\r\n  declarations: [\r\n    Page500Component,\r\n    Page404Component,\r\n    SigninComponent,\r\n    SignupComponent,\r\n    LockedComponent,\r\n    ForgotPasswordComponent,\r\n    SetPasswordComponent,\r\n    OtpModalComponent\r\n  ],\r\n  imports: [\r\n    CommonModule, \r\n FormsModule,\r\n MatSelectModule,\r\n    ReactiveFormsModule,\r\n    AuthenticationRoutingModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule\r\n  ]\r\n})\r\nexport class AuthenticationModule {}\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute } from \"@angular/router\";\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { AuthService } from \"src/app/core/service/auth.service\";\r\nimport { Role } from \"src/app/core/models/role\";\r\n@Component({\r\n  selector: \"app-signin\",\r\n  templateUrl: \"./signin.component.html\",\r\n  styleUrls: [\"./signin.component.scss\"],\r\n})\r\nexport class SigninComponent implements OnInit {\r\n  authForm: FormGroup;\r\n  submitted = false;\r\n  error = \"\";\r\n  hide = true;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthService\r\n  ) {}\r\n  ngOnInit() {\r\n    this.authForm = this.formBuilder.group({\r\n      username: [\"admin@hospital.org\", Validators.required],\r\n      password: [\"admin@123\", Validators.required],\r\n    });\r\n  }\r\n  get f() {\r\n    return this.authForm.controls;\r\n  }\r\n  adminSet() {\r\n    this.authForm.get(\"username\").setValue(\"admin@hospital.org\");\r\n    this.authForm.get(\"password\").setValue(\"admin@123\");\r\n  }\r\n  doctorSet() {\r\n    this.authForm.get(\"username\").setValue(\"doctor@hospital.org\");\r\n    this.authForm.get(\"password\").setValue(\"doctor@123\");\r\n  }\r\n  patientSet() {\r\n    this.authForm.get(\"username\").setValue(\"patient@hospital.org\");\r\n    this.authForm.get(\"password\").setValue(\"patient@123\");\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    this.error = \"\";\r\n    if (this.authForm.invalid) {\r\n      this.error = \"Username and Password not valid !\";\r\n      return;\r\n    } else {\r\n      this.authService\r\n        .login(this.f.username.value, this.f.password.value)\r\n        .subscribe(\r\n          (res) => {\r\n            if (res) {\r\n              const role = this.authService.currentUserValue.role;\r\n              if (role === Role.All || role === Role.Admin) {\r\n                this.router.navigate([\"/admin/dashboard/main\"]);\r\n              } else if (role === Role.Doctor) {\r\n                this.router.navigate([\"/doctor/dashboard\"]);\r\n              } else if (role === Role.Patient) {\r\n                this.router.navigate([\"/patient/dashboard\"]);\r\n              } else {\r\n                this.router.navigate([\"/authentication/signin\"]);\r\n              }\r\n            } else {\r\n              this.error = \"Invalid Login\";\r\n            }\r\n          },\r\n          (error) => {\r\n            this.error = error;\r\n            this.submitted = false;\r\n          }\r\n        );\r\n    }\r\n  }\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/main.jpg);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <h2 class=\"welcome-msg\"> Welcome to Physician Discovery </h2>\r\n          <p class=\"auth-signup-text text-muted\">Need an account?<a routerLink=\"/authentication/signup\"\r\n              class=\"sign-up-link\">Sign Up\r\n            </a></p>\r\n         \r\n          <h2 class=\"login-title\">Sign in</h2>\r\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Username</mat-label>\r\n                  <input matInput formControlName=\"username\" />\r\n                  <mat-icon matSuffix>face</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\r\n                    Username is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Password</mat-label>\r\n                  <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\r\n                  <a class=\"show-pwd-icon\" href=\"#\" onClick=\"return false;\" matSuffix (click)=\"hide = !hide\"\r\n                    [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\r\n                    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                  </a>\r\n                  <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\r\n                    Password is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between align-items-center mb-5\">\r\n              <div class=\"form-check\">\r\n                <label class=\"form-check-label\">\r\n                  <input class=\"form-check-input\" type=\"checkbox\" value=\"\"> Remember me\r\n                  <span class=\"form-check-sign\">\r\n                    <span class=\"check\"></span>\r\n                  </span>\r\n                </label>\r\n              </div>\r\n              <a class=\"txt1\" routerLink=\"/authentication/forgot-password\">Forgot Password?</a>\r\n            </div>\r\n            <div *ngIf=\"error\" class=\"alert alert-danger mt-3 mb-0\">{{error}}</div>\r\n            <div class=\"container-auth-form-btn\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \" type=\"submit\">\r\n                Login\r\n              </button>\r\n            </div>\r\n          </form>\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SigninComponent } from './signin/signin.component';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LockedComponent } from './locked/locked.component';\r\nimport { Page404Component } from './page404/page404.component';\r\nimport { Page500Component } from './page500/page500.component';\r\nimport { SetPasswordComponent } from './set-password/set-password.component';\r\nimport { OtpModalComponent } from './otp-modal/otp-modal.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'signin',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'signin',\r\n    component: SigninComponent\r\n  },\r\n  {\r\n    path: 'signup',\r\n    component: SignupComponent\r\n  },\r\n  {\r\n    path: 'forgot-password',\r\n    component: ForgotPasswordComponent\r\n  },\r\n  {\r\n    path: 'set-password',\r\n    component: SetPasswordComponent\r\n  },\r\n  {\r\n    path: 'otp',\r\n    component: OtpModalComponent\r\n  },\r\n  {\r\n    path: 'locked',\r\n    component: LockedComponent\r\n  },\r\n  {\r\n    path: 'page404',\r\n    component: Page404Component\r\n  },\r\n  {\r\n    path: 'page500',\r\n    component: Page500Component\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-set-password',\n  templateUrl: './set-password.component.html',\n  styleUrls: ['./set-password.component.scss']\n})\nexport class SetPasswordComponent implements OnInit {\n\n  authForm: FormGroup;\n  submitted = false;\n  returnUrl: string;\n  hide = true;\n  chide = true;\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {}\n  ngOnInit() {\n    this.authForm = this.formBuilder.group({\n      password: ['', Validators.required],\n      cpassword: ['', Validators.required],\n    });\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  get f() {\n    return this.authForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.authForm.invalid) {\n      return;\n    } else {\n      this.router.navigate(['/dashboard/main']);\n    }\n  }\n\n}\n","<div class=\"auth-container\">\n  <div class=\"row auth-main\">\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/main.jpg);\">\n      </div>\n    </div>\n    <div class=\"col-sm-6 auth-form-section\">\n      <div class=\"form-section\">\n        <div class=\"auth-wrapper\">\n          <h2 class=\"welcome-msg\">Forgot Password </h2>\n         \n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"row\">\n                <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                  <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                    <mat-label>New Password</mat-label>\n                    <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\n                    <mat-icon matSuffix (click)=\"hide = !hide\">\n                      {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\n                      Password is required\n                    </mat-error>\n                  </mat-form-field>\n                </div>\n              </div>\n  \n              <div class=\"row\">\n                <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\n                  <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                    <mat-label>Confirm Password</mat-label>\n                    <input matInput formControlName=\"cpassword\" [type]=\"chide ? 'password' : 'text'\" required>\n                    <mat-icon matSuffix (click)=\"chide = !chide\">\n                      {{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    <mat-error *ngIf=\"authForm.get('cpassword').hasError('required')\">\n                      Confirm Password is required\n                    </mat-error>\n                  </mat-form-field>\n                </div>\n              </div>\n            <div class=\"container-auth-form-btn mt-5\">\n              <button mat-flat-button [color]=\"'primary'\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \" type=\"submit\">\n                Submit\n              </button>\n            </div>\n            \n            <div class=\"flex-sb-m w-full  p-b-20 register-bottom\">\n                <div>\n                  <span> Back to <a routerLink=\"/authentication/signin\">\n                    Sign in\n                    </a></span>\n                </div>\n              </div>\n\n          </form>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms'; \r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\ninterface Food {\r\n  value: string;\r\n  viewValue: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss'],\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  authForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  hide = true;\r\n  chide = true;\r\n\r\n  position = '';\r\n  industry = '';\r\n  experience = 0; \r\n  matcher = new ErrorStateMatcher();\r\n  salutation: any[] = ['Dr', 'MBBS'];\r\n  city: any[] = ['pune', 'Kolhapur' ];\r\n  state: any[] = ['Maharastra', 'UP', 'MP'];\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  \r\n  \r\n\r\n  ngOnInit() {\r\n    this.authForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      email: [\r\n        '',\r\n        [Validators.required, Validators.email, Validators.minLength(5)],\r\n      ],\r\n      password: ['', Validators.required],\r\n      cpassword: ['', Validators.required],\r\n      salutation: ['', Validators.required],\r\n      city: ['', Validators.required],\r\n      state: ['', Validators.required]\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n\r\n    this.setValues();\r\n\r\n  }\r\n  get f() {\r\n    return this.authForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.authForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/admin/dashboard/main']);\r\n    }\r\n  }\r\n\r\n  setValues() {\r\n    this.authForm.setValue({\r\n      salutation: 'Dr',\r\n      city: 'Mining',\r\n      state: 'Maharastra',\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <!-- <div class=\"left-img\" style=\"background-image: url(assets/images/pages/bg-02.png);\"> -->\r\n        <div class=\"left-img\" style=\"background-image: url(assets/images/pages/main.jpg);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <h2 class=\"welcome-msg\"> Sign Up </h2>\r\n          <p class=\"auth-signup-text text-muted\">Please fill your details</p>\r\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Salutation </mat-label>\r\n                  <mat-select formControlName=\"salutation\" [errorStateMatcher]=\"matcher\">\r\n                    <mat-option *ngFor=\"let sal of salutation\" [value]=\"sal\">\r\n                      {{sal}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"authForm.get('salutation').hasError('required')\">\r\n                    You must make a selection\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>First Name </mat-label>\r\n                  <input matInput formControlName=\"username\" required>\r\n                  <mat-icon matSuffix>face</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\r\n                    First Name is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Last Name</mat-label>\r\n                  <input matInput formControlName=\"username\" required>\r\n                  <mat-icon matSuffix>face</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\r\n                    Last Name is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Phone Number</mat-label>\r\n                  <input matInput formControlName=\"username\" required>\r\n                  <mat-icon matSuffix>phone</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\r\n                    Please enter a valid Phone Number  \r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Email</mat-label>\r\n                  <input matInput formControlName=\"email\" required>\r\n                  <mat-icon matSuffix>mail</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('email').hasError('required') || authForm.get('email').touched\">\r\n                    Please enter a valid email address\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>License Number</mat-label>\r\n                  <input matInput formControlName=\"username\" required>\r\n                  <mat-icon matSuffix>assignment_ind</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\r\n                    Please enter a valid License Number  \r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Physician Identification Number</mat-label>\r\n                  <input matInput formControlName=\"username\" required>\r\n                  <mat-icon matSuffix>assignment_ind</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('username').hasError('required')\">\r\n                    Please enter a valid Physician Identification Number\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>State </mat-label>\r\n                  <mat-select formControlName=\"position\" [errorStateMatcher]=\"matcher\">\r\n                    <mat-option *ngFor=\"let state of state\" [value]=\"state\">\r\n                      {{state}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"authForm.get('state').hasError('required')\">\r\n                    You must make a selection\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>City </mat-label>\r\n                  <mat-select formControlName=\"city\" [errorStateMatcher]=\"matcher\">\r\n                    <mat-option *ngFor=\"let city of city\" [value]=\"city\">\r\n                      {{city}}\r\n                    </mat-option>\r\n                  </mat-select>\r\n                  <mat-error *ngIf=\"authForm.get('city').hasError('required')\">\r\n                    You must make a selection\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n        \r\n\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Password</mat-label>\r\n                  <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\" required>\r\n                  <mat-icon matSuffix (click)=\"hide = !hide\">\r\n                    {{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('password').hasError('required')\">\r\n                    Password is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Confirm Password</mat-label>\r\n                  <input matInput formControlName=\"cpassword\" [type]=\"chide ? 'password' : 'text'\" required>\r\n                  <mat-icon matSuffix (click)=\"chide = !chide\">\r\n                    {{chide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('cpassword').hasError('required')\">\r\n                    Confirm Password is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n        \r\n            <div class=\"flex-sb-m w-full  p-b-20\">\r\n              <div>\r\n                <span>By clicking continue, you agree to our <a routerLink=\"/authentication/signin\">\r\n                  Terms of Service\r\n                  </a> and our <a routerLink=\"/authentication/signin\"> Privacy Policy</a></span>\r\n              </div>\r\n            </div>\r\n           \r\n            \r\n            <div class=\"container-auth-form-btn\">\r\n              <button mat-flat-button color=\"primary\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \" type=\"submit\">\r\n                Register\r\n              </button>\r\n            </div>\r\n\r\n            <div class=\"flex-sb-m w-full  p-b-20 register-bottom\">\r\n              <div>\r\n                <span>Already Registered? <a routerLink=\"/authentication/signin\">\r\n                    Login\r\n                  </a></span>\r\n              </div>\r\n            </div>\r\n\r\n          </form>\r\n\r\n          \r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-otp-modal',\n  templateUrl: './otp-modal.component.html',\n  styleUrls: ['./otp-modal.component.scss']\n})\nexport class OtpModalComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"auth-container\">\n    <div class=\"row auth-main\">\n      <div class=\"col-sm-6 px-0 d-none d-sm-block\">\n        <div class=\"left-img\" style=\"background-image: url(assets/images/pages/main.jpg);\">\n        </div>\n      </div>\n  \n\n      <div class=\"col-sm-6 auth-form-section\">\n        <div class=\"form-section\">\n          <div class=\"auth-wrapper\">\n            <h2 class=\"welcome-msg\">Sign Up </h2>\n            <span class=\"error-subheader2 p-t-20 p-b-15\">\n                Please fill your details\n            </span>\n            \n            <form  >\n              <div class=\"otp--sec  \">\n              \n                  <mat-form-field appearance=\"fill\" > \n                    <input #code1  matInput  maxlength=\"1\">\n                  </mat-form-field>\n                  <mat-form-field appearance=\"fill\" > \n                    <input #code2 matInput     maxlength=\"1\">\n                  </mat-form-field>\n                  <mat-form-field appearance=\"fill\" > \n                    <input #code3 matInput   maxlength=\"1\">\n                  </mat-form-field>\n                  <mat-form-field appearance=\"fill\" > \n                    <input #code4 matInput   maxlength=\"1\">\n                  </mat-form-field>\n                  <mat-form-field appearance=\"fill\" > \n                    <input #code5 matInput  maxlength=\"1\">\n                  </mat-form-field>\n                  <mat-form-field appearance=\"fill\" > \n                    <input #code6 matInput  maxlength=\"1\">\n                  </mat-form-field>\n                    \n                </div>\n              </form>   \n             \n          </div>\n        </div>\n      </div>\n\n  \n    </div>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  authForm: FormGroup;\r\n  submitted = false;\r\n  returnUrl: string;\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit() {\r\n    this.authForm = this.formBuilder.group({\r\n      email: [\r\n        '',\r\n        [Validators.required, Validators.email, Validators.minLength(5)],\r\n      ],\r\n    });\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n  get f() {\r\n    return this.authForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.authForm.invalid) {\r\n      return;\r\n    } else {\r\n      this.router.navigate(['/authentication/set-password']);\r\n    }\r\n  }\r\n}\r\n","<div class=\"auth-container\">\r\n  <div class=\"row auth-main\">\r\n    <div class=\"col-sm-6 px-0 d-none d-sm-block\">\r\n      <div class=\"left-img\" style=\"background-image: url(assets/images/pages/main.jpg);\">\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-6 auth-form-section\">\r\n      <div class=\"form-section\">\r\n        <div class=\"auth-wrapper\">\r\n          <h2 class=\"welcome-msg\">Forgot Password </h2>\r\n         \r\n          <form class=\"validate-form\" [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"row\">\r\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\r\n                <span class=\"error-subheader2 p-t-20 p-b-15\">\r\n                  Enter your Email Address below to reset your password\r\n                </span>\r\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\r\n                  <mat-label>Email</mat-label>\r\n                  <input matInput formControlName=\"email\" required>\r\n                  <mat-icon matSuffix>mail</mat-icon>\r\n                  <mat-error *ngIf=\"authForm.get('email').hasError('required') || authForm.get('email').touched\">\r\n                    Please enter a valid email address\r\n                  </mat-error>\r\n                </mat-form-field>\r\n              </div>\r\n            </div>\r\n            <div class=\"container-auth-form-btn mt-5\">\r\n              <button mat-flat-button [color]=\"'primary'\" class=\"auth-form-btn\" [disabled]=\"!authForm.valid \" type=\"submit\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n           \r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n"]}